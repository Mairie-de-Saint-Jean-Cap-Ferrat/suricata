# Utiliser une image Python légère
FROM python:3.10-slim

LABEL maintainer="y0n1x <contact@maytech.fr>"
LABEL description="Interface Web (Flask + Frontend) pour Suricata"

# Définir le répertoire de travail principal
WORKDIR /app

# Copier d'abord le fichier requirements.txt pour profiter du cache Docker
# Il est maintenant à la racine du dossier web
COPY web/requirements.txt /app/

# Installer les dépendances Python
RUN pip install --no-cache-dir -r /app/requirements.txt

# AJOUT: Installation du client Docker et Docker Compose v2
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates curl gnupg lsb-release apt-transport-https && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y --no-install-recommends docker-ce-cli docker-compose-plugin && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copier tout le contenu du dossier web (frontend et backend)
COPY web/ /app/web/

# Définir le répertoire de travail final où se trouve app.py
WORKDIR /app/web

# Exposer le port sur lequel Flask écoute
EXPOSE 5001

# Définir la commande pour lancer l'application Flask (app.py est maintenant ici)
# Utiliser gunicorn ou waitress serait mieux en production
CMD ["python", "app.py"]
