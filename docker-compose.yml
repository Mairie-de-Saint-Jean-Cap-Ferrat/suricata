version: '3.8'

services:
  suricata:
    build:
      context: .
      dockerfile: Dockerfile
    # L'entrypoint spécifie -c /etc/suricata/suricata.yaml (qui est maintenant DANS l'image)
    cap_add:
      - NET_ADMIN 
      - SYS_NICE  
      - IPC_LOCK 
    network_mode: "host" 
    volumes:
      - suricata-logs:/var/log/suricata # Volume pour les logs
      # Le volume de config n'est plus monté, il est dans l'image
      # - ./docker/run/etc:/etc/suricata:rw 
      # Le volume des règles n'est plus nécessaire ici, suricata-update les gère dans /var/lib/suricata/rules
      # - suricata-rules:/etc/suricata/rules # Volume pour les règles
      - suricata-run:/var/run/suricata # Volume pour le socket et PID
    environment:
      - SURICATA_INTERFACE=eth0 
      - MODE=ids # La variable MODE est toujours utilisée par l'entrypoint
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.webinterface
    ports:
      - "5001:5001"
    volumes:
      - suricata-run:/var/run/suricata:ro
      # Monter le volume des logs de Suricata en lecture seule dans le dossier 'logs' du CWD de l'app Flask
      - suricata-logs:/app/web/logs:ro
      # Monter le répertoire de configuration de Suricata pour modifier enable/disable.conf
      - ./docker/run/etc:/etc/suricata:rw 
      # AJOUT: Monter le socket Docker de l'hôte
      # ATTENTION: Risque de sécurité majeur ! Donne un accès privilégié à l'hôte.
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - SURICATA_SOCKET_PATH=/var/run/suricata/suricata-command.socket
    depends_on:
      - suricata
    restart: unless-stopped

volumes:
  suricata-logs:
  # suricata-rules: # Volume supprimé
  suricata-run:

# networks:
#   suricata-net:
#     driver: bridge

# Note:
# - Le script docker-build.sh génère le fichier ./docker/run/etc/suricata.yaml.
# - Le Dockerfile COPIE ce fichier dans l'image à /etc/suricata/suricata.yaml.
# - Le volume de configuration n'est PLUS monté dans docker-compose.
# - L'entrypoint.sh utilise -c /etc/suricata/suricata.yaml.
# - Pour modifier la configuration, exécutez docker-build.sh PUIS reconstruisez l'image (`docker-compose build suricata`).
# - Ensure your Dockerfile builds correctly.
# - The `network_mode: "host"` is simple but less secure. Consider bridge networking
#   with specific port mappings if host mode isn't suitable.
# - Adjust the SURICATA_INTERFACE environment variable or entrypoint logic
#   based on your actual network setup.
# - You might need to create the ./suricata-logs directory on the host first.
# - The rules volume is optional; Suricata can use rules baked into the image
#   or downloaded via suricata-update.
# - Ensure suricata.yaml is configured correctly for your chosen interface
#   and logging (especially eve.json). It should log to /var/log/suricata.
# - Vérifiez que suricata.yaml dans ce dossier est configuré pour activer le socket Unix
#   et le placer dans /var/run/suricata/ avec le nom `suricata-command.socket`.
#   Exemple de configuration dans suricata.yaml:
#   unix-command:
#     enabled: yes
#     # Le chemin est relatif au répertoire de travail de Suricata ou PWD
#     # S'il est lancé avec le pid-file dans /var/run/suricata, il devrait le mettre là.
#     # Sinon, spécifiez un chemin absolu si nécessaire, mais le volume est monté sur /var/run/suricata.
#     filename: suricata-command.socket # Nom attendu par le backend web
# - Le network_mode: host pour suricata peut empêcher la communication directe via nom de service
#   si vous passez en mode bridge. Le partage du socket via volume reste la méthode clé ici.
# - Le service web (`web`) doit avoir les permissions pour lire le socket créé par Suricata.
#   Le volume nommé géré par Docker devrait faciliter cela. 